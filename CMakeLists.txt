cmake_minimum_required(VERSION 3.25)
project(hfst)

include(CheckIncludeFile)
include(CheckIncludeFileCXX)
include(CheckLibraryExists)
include(CheckFunctionExists)

include_directories(${CMAKE_BINARY_DIR})

if(APPLE)
    list(APPEND CMAKE_PREFIX_PATH /opt/homebrew)
    set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /opt/homebrew/lib)
    set(ENV{PKG_CONFIG_PATH} "/opt/homebrew/lib/pkgconfig")
endif()

if(WIN32)
    find_package(dlfcn-win32 REQUIRED)
    set(YY_NO_UNISTD_H " ")
    find_package(ICU)
    set(CMAKE_CXX_FLAGS "/std:c++14 /bigobj /DWINDOWS /DHFSTEXPORT /DOPENFSTEXPORT /DHAVE_CONFIG_H /I${CMAKE_BINARY_DIR} /D_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "/std:c11 /bigobj /DWINDOWS /DHFSTEXPORT /DOPENFSTEXPORT /DHAVE_CONFIG_H /D_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS /I${CMAKE_BINARY_DIR} ${CMAKE_C_FLAGS}")
else()
    find_package(PkgConfig)
    include_directories(ICU_INCLUDE_DIRS)
    pkg_check_modules(ICU icu-uc REQUIRED)
    set(CMAKE_CXX_FLAGS "-std=c++14 -w -O2 -DHAVE_CONFIG_H -I${CMAKE_BINARY_DIR} ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-w -O2 -DHAVE_CONFIG_H -I${CMAKE_BINARY_DIR} ${CMAKE_C_FLAGS}")
endif()

find_package(FLEX 2.6 REQUIRED)
find_package(BISON 3.0 REQUIRED)

check_include_file_cxx("backward/hash_map" HAVE_BACKWARD_HASH_MAP)
check_include_file_cxx("backward/hash_set" HAVE_BACKWARD_HASH_SET)
#check_include_file("dlfcn.h" HAVE_DLFCN_H)
set(HAVE_DLFCN_H " ")
check_function_exists("error" HAVE_ERROR)
check_function_exists("error_at_line" HAVE_ERROR_AT_LINE)
check_include_file("error.h" HAVE_ERROR_H)
check_include_file_cxx("ext/hash_map" HAVE_EXT_HASH_MAP)
check_include_file_cxx("ext/hash_set" HAVE_EXT_HASH_SET)
check_include_file_cxx("ext/slist" HAVE_EXT_SLIST)
check_function_exists("floor" HAVE_FLOOR)
check_function_exists("getdelim" HAVE_GETDELIM)
check_function_exists("getline" HAVE_GETLINE)
check_function_exists("getopt_long" HAVE_GETOPT_LONG)
check_include_file("glob.h" HAVE_GLOB_H)
check_include_file_cxx("hash_map" HAVE_HASH_MAP)
check_include_file_cxx("hash_set" HAVE_HASH_SET)
check_include_file("inttypes.h" HAVE_INTTYPES_H)
check_include_file("langinfo.h" HAVE_LANGINFO_H)

find_library(LIBDL "dl")
if(LIBDL)
  set(HAVE_LIBDL " ")
endif()

find_library(LIBM "m")
if(LIBM)
  set(HAVE_LIBM " ")
endif()

find_library(LIBPTHREAD "pthread")
if(LIBPTHREAD)
  set(HAVE_LIBPTHREAD " ")
endif()

find_library(LIBXFSM "xfsm")
if(LIBXFSM)
  set(HAVE_LIBXFSM " ")
endif()

check_include_file("limits" HAVE_LIMITS_H)
check_include_file("locale" HAVE_LOCALE_H)
check_function_exists("nl_langinfo" HAVE_NL_LANGINFO)

# TODO: readline checks

check_function_exists("setlocale" HAVE_SETLOCALE)
check_function_exists("setprogname" HAVE_SETPROGNAME)
check_function_exists("set_program_name" HAVE_SET_PROGRAM_NAME)
check_include_file("stdint.h" HAVE_STDINT_H)
check_include_file("stdio.h" HAVE_STDIO_H)
check_include_file("stdlib.h" HAVE_STDLIB_H)
check_function_exists("strchr" HAVE_STRCHR)
check_function_exists("strcspn" HAVE_STRCSPN)
check_function_exists("strdup" HAVE_STRDUP)
check_function_exists("strerror" HAVE_STRERROR)
check_include_file("strings.h" HAVE_STRINGS)
check_include_file("string.h" HAVE_STRING)
check_function_exists("strncasecmp" HAVE_STRNCASECMP)
check_function_exists("strndup" HAVE_STRNDUP)
check_function_exists("strtod" HAVE_STRTOD)
check_function_exists("strtol" HAVE_STRTOL)
check_function_exists("strtoul" HAVE_STRTOUL)
check_function_exists("xstrdup" HAVE_XSTRDUP)
check_function_exists("sys/stat.h" HAVE_SYS_STAT_H)
check_function_exists("sys/types.h" HAVE_SYS_TYPES_H)
check_function_exists("unistd.h" HAVE_UNISTD_H)

set(HFST_LONGVERSION "300160000L")
set(HFST_REVISION "\"$Revision$\"")
set(HFST_STRING "\"hfst 3.16.0\"")
set(PACKAGE_BUGREPORT "\"hfst-bugs@helsinki.fi\"")
set(PACKAGE "\"hfst\"")
set(PACKAGE_NAME "\"hfst\"")
set(PACKAGE_TARNAME "\"hfst\"")
set(PACKAGE_STRING "\"hfst 3.16.0\"")
set(PACKAGE_URL "\"\"")
set(PACKAGE_VERSION "\"3.16.0\"")
set(VERSION "\"3.16.0\"")
set(STDC_HEADERS 1)
set(USE_ICU_UNICODE 1)
set(YYTEXT_POINTER 1)

option(ENABLE_SFST "enables SFST backend" OFF)
if(ENABLE_SFST)
set(HAVE_SFST " ")
endif()

option(ENABLE_FOMA "enables Foma backend" OFF)
if(ENABLE_FOMA)
set(HAVE_FOMA " ")
endif()

option(ENABLE_OPENFST "enables OpenFST backend" OFF)
if(ENABLE_OPENFST)
set(HAVE_OPENFST " ")
set(HAVE_OPENFST_LOG " ")
endif()

# Not configurable.
set(HAVE_HFSTOL " ")

configure_file(config.h.in config.h)

add_subdirectory(back-ends)
add_subdirectory(libhfst)
# add_subdirectory(tools)
# add_subdirectory(test)
# add_subdirectory(doc)
# add_subdirectory(man)
# add_subdirectory(scripts)

